generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Story {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  authorId  String   @db.ObjectId
  author    User     @relation("author_stories", fields: [authorId], references: [id])
  likedBy   Like[]   @relation("story_likes")
  tagIds    String[] @db.ObjectId
  tags      Tag[]    @relation("story_tags", fields: [tagIds], references: [id])
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime  @default(now())
  email          String    @unique(map: "email_U")
  first_name     String
  gender         String
  last_name      String
  password       String
  updatedAt      DateTime  @updatedAt
  username       String    @unique(map: "username_U")
  likes          Like[]    @relation("like_user")
  stories        Story[]   @relation("author_stories")
  comments       Comment[] @relation("user_comments")
  commentsLikes  Comment[] @relation("comment_likes", fields: [commentLikesId], references: [id])
  commentLikesId String[]  @db.ObjectId
}

model Comment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  authorId      String
  updatedAt     DateTime  @updatedAt
  author        User      @relation("user_comments", fields: [authorId], references: [id])
  text          String
  parentId      String    @db.ObjectId
  parent        Comment   @relation("comment_replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reply         Comment[] @relation("comment_replies")
  likedByUserId String[]  @db.ObjectId
  likedBy       User[]    @relation("comment_likes", fields: [likedByUserId], references: [id])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storyId   String   @db.ObjectId
  story     Story    @relation("story_likes", fields: [storyId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation("like_user", fields: [userId], references: [id])
  tagId     String?  @unique @db.ObjectId
  tag       Tag?     @relation("like_tags", fields: [tagId], references: [id])
}

model Tag {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String
  image      String
  likesByTag Like?    @relation("like_tags")
  storiesId  String[] @db.ObjectId
  stories    Story[]  @relation("story_tags", fields: [storiesId], references: [id])
}
